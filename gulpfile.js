'use strict';

require('dotenv').config();

const gulp = require('gulp');
const exec = require('child_process').exec;
const awspublish = require("gulp-awspublish");
const AWS = require('aws-sdk');

const cmd = {
	'codebuild_build': `${process.cwd()}/aws-codebuild-docker-images/ubuntu/standard/3.0/codebuild_build.sh`,
	'image': 'aws/codebuild/standard:3.0',
	'source': `${process.cwd()}`,
	'artifact': `${process.cwd()}/builds/lambdas/`,
	'env': `${process.cwd()}/.env`,
};

/**
 * Uses a local CodeBuild docker image to create a lambda and all its dependencies bundled into an
 * artifacts zip as per defined in the buildspec-scan.yml file
 */
const buildLambda = (lambdaName, cb) => {
	exec(`${cmd.codebuild_build} -b ./builds/configurations/buildspec-${lambdaName}.yml -i ${cmd.image} -s ${cmd.source} -a ${cmd.artifact}/ -e ${cmd.env}`, (err, stdout, stderr) => {
		exec(`mv ${cmd.artifact}artifacts.zip ${cmd.artifact}virus-file-${lambdaName}-lambda.zip`, (err, stdout, stderr) => {
			const publisher = awspublish.create(
				{
					region: process.env.AWS_REGION,
					params: {
						Bucket: process.env.AWS_LAMBDA_BUCKET
					},
					credentials: new AWS.SharedIniFileCredentials()
				}
			);

			gulp
				.src("./builds/lambdas/*.zip")

				.pipe(publisher.publish())

				// print upload updates to console
				.pipe(awspublish.reporter())

			cb(err);
		});
	});
}

/** Build Tasks */
gulp.task('build-scan-lambda', (cb) => buildLambda('scan', cb));
gulp.task('build-report-lambda', (cb) => buildLambda('report', cb));

gulp.task('build', gulp.series(
	'build-scan-lambda',
	'build-report-lambda'
));