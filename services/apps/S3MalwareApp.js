'use strict';

const MalwareScanMessage = (require('./../messages/MalwareScanMessage'));
const MalwareReportMessage = (require('./../messages/MalwareReportMessage'));

module.exports = class S3MalwareApp {
	constructor(queue, scanner, options) {
		this.queue = queue;
		this.scanner = scanner;
		this.options = {
			POSITIVE_THRESHOLD: 1	// The number of unacceptable positive scans
		}

		// Override default configurations
		Object.assign(this.options, options);
	}

	/**
	 * Takes an input base64 encoded file, performs a scan using the object scanner and subsequently
	 * adds the results of the action to the object queue.
	 * 
	 * @param {*} bucketName
	 * @param {*} key
	 * @param {*} base64File
	 * @param {*} callback
	 */
	scan(bucketName, key, base64File, callback) {
		this.scanner.fileScan(base64File).then((response) => {
			const malwareScanMessage = new MalwareScanMessage(JSON.parse(response), bucketName, key);
			this.queue.sendMessage(malwareScanMessage, callback);
		}).catch((err) => { console.error(err); });
	}

	/**
	 * Takes an input scan id, fetches a report using the object scanner and subsequently 
	 * adds the results of the action to the object queue
	 * 
	 * @param {*} scanId 
	 * @param {*} bucketName
	 * @param {*} key
	 * @param {*} callback
	 */
	report(scanId, bucketName, key, callback) {
		this.scanner.fileReport(scanId).then((data) => {
			data = JSON.parse(data);

			if (data.positives >= this.options.POSITIVE_THRESHOLD) {
				const malwareReportMessage = new MalwareReportMessage(bucketName, key, `Identified as suspicious, number of threats: ${data.positives}`);
				this.queue.sendMessage(malwareReportMessage, callback);
			}
		}).catch((err) => {
			callback(err);
		});
	}
}