require('dotenv').config();
const AWS = require('aws-sdk');
const virusTotal = new (require('./services/VirusTotalAPI.js'))({
	apiKey: process.env.TOTAL_VIRUS_API_KEY
});

// Set the AWS region 
AWS.config.update({ region: process.env.AWS_CLOUDFORMATION_REGION });

exports.handler = (event, context, callback) => {
	// Loop through the contents of the sqs event records
	for (let record of event.Records) {
		console.log('RECORD ', record);
		const scanId = record.messageAttributes.ScanId.stringValue;
		const s3bucketName = record.messageAttributes.S3BucketName.stringValue;
		const s3key = record.messageAttributes.S3Key.stringValue;

		virusTotal.fileReport(scanId).then((data) => {
			data = JSON.parse(data);
			console.log('DATA => ', data);
			console.log('POSITIVES => ', data.positives);

			if (data.positives > 0) {
				// Add to SQS quarantine queue
				const sqs = new AWS.SQS();
				const malwareReportSqsMessage = new MalwareReportSqsMessage(s3bucketName, s3key, `Identified as suspicious, number of threats: ${data.positives}`);
				sqs.sendMessage(malwareReportSqsMessage.getParams(), function (err, data) {
					err ? callback(err) : callback(null, data);
				});
			}
		}).catch((err) => {
			callback(err);
		});
	}
};

class MalwareReportSqsMessage {
	constructor(s3bucketName, s3key, body) {
		this.params = {
			DelaySeconds: process.env.AWS_QUARANTINE_SQS_DELAY_SECONDS,
			MessageAttributes: {
				"S3BucketName": {
					DataType: "String",
					StringValue: s3bucketName
				},
				"S3Key": {
					DataType: "String",
					StringValue: s3key
				}
			},
			MessageBody: body,
			QueueUrl: process.env.AWS_QUARANTINE_SQS_URL
		}
	}

	getParams() {
		return this.params;
	}
}