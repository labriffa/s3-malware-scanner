const fs = require('fs');
const S3MalwareApp = require('.././services/apps/S3MalwareApp');
const expect = require('chai').expect;

// Mock Objects
const mockSQSMessageQueue = new (require('../services/queues/MockSQSMessageQueue'))();
const mockVirusScanner = new (require('../services/scanners/MockVirusTotalAPI'))();
const sqsMockEvent = JSON.parse(fs.readFileSync(require('path').resolve(__dirname, '../services/queues/mockResponses/sqs/putScanEvent.json')));

describe('#reportLambda()', () => {
	it('should return a queue response', (done) => {
		const s3MalwareApp = new S3MalwareApp(mockSQSMessageQueue, mockVirusScanner);

		// Loop through the contents of the s3 event records
		for (let event of sqsMockEvent.Records) {
			const scanId = event.messageAttributes.ScanId.StringValue;
			const s3bucketName = event.messageAttributes.S3BucketName.StringValue;
			const s3key = event.messageAttributes.S3Key.StringValue;

			s3MalwareApp.report(scanId, s3bucketName, s3key, function (err, response) {
				if (err) {
					console.error(err);
				} else {
					const messages = mockSQSMessageQueue.getMessages();
					const messageAttributes = {
						S3BucketName: messages[0].params.MessageAttributes.S3BucketName.StringValue,
						S3Key: messages[0].params.MessageAttributes.S3Key.StringValue
					}
					// check the contents of the newly added queue message
					expect(messages).to.have.a.lengthOf(1);
					expect(messages[0].params.MessageBody, 'Identified as suspicious, number of threats: 19');
					expect(messageAttributes.S3BucketName).to.equal('test-bucket');
					expect(messageAttributes.S3Key).to.equal('test-file.txt');

					// check the queue response
					expect(response.ResponseMetadata.RequestId).to.equal('test-request-id');
					expect(response.MD5OfMessageBody).to.equal('a892e8d8589e97ca92fb70020f01c16c');
					done();
				}
			});
		}
	})
});