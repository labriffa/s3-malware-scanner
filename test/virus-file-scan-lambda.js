const fs = require('fs');
const S3MalwareApp = require('.././services/apps/S3MalwareApp');
const expect = require('chai').expect;

// Mock Objects
const mockS3StorageService = new (require('../services/storage/MockS3StorageService'))();
const mockSQSMessageQueue = new (require('../services/queues/MockSQSMessageQueue'))();
const mockVirusScanner = new (require('../services/scanners/MockVirusTotalAPI'))();
const s3MockEvent = JSON.parse(fs.readFileSync(require('path').resolve(__dirname, '../services/storage/mockResponses/s3/putEvent.json')));

describe('#scanLambda()', () => {
	it('should return a queue response', (done) => {
		const s3MalwareApp = new S3MalwareApp(mockSQSMessageQueue, mockVirusScanner);

		// Loop through the contents of the s3 event records
		for (let event of s3MockEvent.Records) {
			mockS3StorageService.getFile(
				{
					Bucket: event.s3.bucket.name,
					Key: event.s3.object.key
				},
				function (err, file) {
					if (file) {
						s3MalwareApp.scan(event.s3.bucket.name, event.s3.object.key, file.Body.toString('base64'), function (err, response) {
							if (err) {
								console.error(err);
							} else {
								const messages = mockSQSMessageQueue.getMessages();
								const messageAttributes = {
									ScanId: messages[0].params.MessageAttributes.ScanId.StringValue,
									Permalink: messages[0].params.MessageAttributes.Permalink.StringValue,
									S3BucketName: messages[0].params.MessageAttributes.S3BucketName.StringValue,
									S3Key: messages[0].params.MessageAttributes.S3Key.StringValue
								}
								// check the contents of the newly added queue message
								expect(messages).to.have.a.lengthOf(1);
								expect(messageAttributes.ScanId).to.equal('d140c244ef892e59c7f68bd0c6f74bb711032563e2a12fa9dda5b760daecd556-1359112395');
								expect(messageAttributes.Permalink).to.match(/https?:\/\/(www\.)?[-a-z0-9@:%._\+~#=]{1,256}\.[a-z0-9()]{1,6}\b([-a-z0-9()@:%_\+.~#?&//=]*)/i);
								expect(messageAttributes.S3BucketName).to.equal('test-bucket');
								expect(messageAttributes.S3Key).to.equal('test-file.txt');

								// check the queue response
								expect(response.ResponseMetadata.RequestId).to.equal('test-request-id');
								expect(response.MD5OfMessageBody).to.equal('a892e8d8589e97ca92fb70020f01c16c');
								done();
							}
						})
					} else {
						console.error(err);
					}
				}
			)
		}
	})
});