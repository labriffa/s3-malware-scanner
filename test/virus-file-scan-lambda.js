const fs = require('fs');
const S3MalwareApp = require('.././services/apps/S3MalwareApp');

// Mock Objects
const mockS3StorageService = new (require('../services/storage/MockS3StorageService'))();
const mockSQSMessageQueue = new (require('../services/queues/MockSQSMessageQueue'))();
const mockVirusScanner = new (require('../services/scanners/MockVirusTotalAPI'))();
const s3MockEvent = JSON.parse(fs.readFileSync(require('path').resolve(__dirname, '../services/storage/mockResponses/s3/putEvent.json')));

var expect = require('chai').expect;

describe('#scanLambda()', () => {
	it('should return a queue response', (done) => {
		const s3MalwareApp = new S3MalwareApp(mockSQSMessageQueue, mockVirusScanner);

		// Loop through the contents of the s3 event records
		for (let event of s3MockEvent.Records) {
			mockS3StorageService.getFile(
				{
					Bucket: "Test Bucket",
					Key: "test-file.txt"
				},
				function (err, file) {
					file
						? s3MalwareApp.scan(event.s3.object.key, file.Body.toString('base64'), function (err, response) {
							if (err) {
								console.error(err);
							} else {
								expect(response.ResponseMetadata.RequestId).to.equal('test-request-id');
								expect(response.MD5OfMessageBody).to.equal('a892e8d8589e97ca92fb70020f01c16c');
								done();
							}
						})
						: console.error(err);
				}
			)
		}
	})
});