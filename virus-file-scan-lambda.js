exports.handler = (event, context, callback) => {
	require('dotenv').config();
	const AWS = require('aws-sdk');

	// Set the AWS region 
	AWS.config.update({ region: process.env.AWS_CLOUDFORMATION_REGION });

	const VirusTotal = new (require('./services/VirusTotal.js'))({
		apiKey: process.env.TOTAL_VIRUS_API_KEY
	});

	const s3 = new AWS.S3();

	// Loop through the contents of the s3 event records
	for (let record of event.Records) {
		// Fetch the S3 file as a Base64 representation
		const s3Params = { Bucket: process.env.AWS_S3_BUCKET_NAME, Key: record.s3.object.key };

		s3.getObject(s3Params, function (err, file) {
			if (!err) {
				const base64File = file.Body.toString('base64');
				VirusTotal.fileScan(base64File).then((response) => {
					const data = JSON.parse(response);
					// Add to SQS scan queue
					const sqs = new AWS.SQS();

					const params = {
						DelaySeconds: process.env.AWS_SCAN_SQS_DELAY_SECONDS,
						MessageAttributes: {
							"ScanId": {
								DataType: "String",
								StringValue: data.scan_id
							},
							"Permalink": {
								DataType: "String",
								StringValue: data.permalink
							},
							"S3BucketName": {
								DataType: "String",
								StringValue: process.env.AWS_S3_BUCKET_NAME
							},
							"S3Key": {
								DataType: "String",
								StringValue: record.s3.object.key
							}
						},
						MessageBody: data.verbose_msg,
						QueueUrl: process.env.AWS_SCAN_SQS_URL
					};

					sqs.sendMessage(params, function (err, data) {
						if (err) {
							callback(err);
						} else {
							callback(null, data);
						}
					});

				}).catch((err) => {
					console.error(err);
				});
			}
			else {
				console.error(err);
			}
		});
	}
};